#!/bin/bash 

QCTOOL=qctool

###
# ADD CODES TO LOAD MODULES HERE
#
# Broad institute: 
# source /broad/software/scripts/useuse
# use OpenblasR
# use GCC-5.2
# QCTOOL=~/qctool/qctool
#
# erisone.partners.org
# module add plink/2.0a
# module add R-mkl/3.3.2
# 
# BCH E2:
# module add openblas/0.3.5
# module add R/3.5.3
###

if [ ! -z "$SGE_TASK_ID" ]; then
    CHROM=$SGE_TASK_ID
    echo "SGE/UGER clusters: SGE_TASK_ID=$CHROM"
elif [ ! -z "$LSB_JOBINDEX" ]; then
    CHROM=$LSB_JOBINDEX
    echo "LSF clusters: LSB_JOBINDEX=$CHROM"
elif [ ! -z "$SLURM_ARRAY_TASK_ID" ]; then
    CHROM=$SLURM_ARRAY_TASK_ID
    echo "SLURM clusters: SLURM_ARRAY_TASK_ID=$CHROM"
else
    echo "Unknown job scheduler"
    exit 1
fi

moddir=$1
valdir=$2
valtag=$3

CHROMSTR=$(printf '%02d' "$CHROM")

# work dir
if [ ! -d "$moddir" ]; then
    echo "ERROR: NPS data directory does not exist: $moddir"
    exit 1
fi


if [ $# -gt 3 ]; then
    winshifts=( $@ )
    winshifts=("${winshifts[@]:3}")
else
    
    # auto-detect window shifts
    echo -n "Detecting window shifts..."

    numwinshifts=`find $moddir -name "*.win_*.adjbetahat_pg.chrom*.txt" -exec basename '{}' \; | grep -o "^win_[0-9]*" | sort -u | sed 's/win_//' | wc -l`

    if [ $numwinshifts -eq 0 ]; then
	echo " ERROR: autodetect failed"
	exit 1
    else
	echo -n ": $numwinshifts shifts detected"
    fi

    winshifts=`find $moddir -name "*.win_*.adjbetahat_pg.chrom*.txt" -exec basename '{}' \; | grep -o "^win_[0-9]*" | sort -u | sed 's/win_//'`

    echo -n " ("
    echo -n $winshifts
    echo ")"
fi

traindir=`Rscript -e "args <- readRDS(\"$moddir/args.RDS\"); cat(\":NPS:\", args[[\"traindir\"]], sep='');" | grep -F ':NPS:' | sed 's/^:NPS://' `

if [ -z "$traindir" ] 
then
    echo "Training data dir: unspecified"
fi

traintag=`Rscript -e "args <- readRDS(\"$moddir/args.RDS\"); cat(\":NPS:\", args[[\"traintag\"]], sep='');" | grep -F ':NPS:' | sed 's/^:NPS://' `

for winshift in $winshifts
do
    echo "----- Shifted by $winshift -----"

    modtag="$traintag.win_${winshift}"
    prefix="$valdir/chrom${CHROM}.${valtag}"
    input="-g $prefix.bgen -s $prefix.sample"
    snpinfofile="$moddir/chrom$CHROM.$traintag.snpinfo"

    if [ ! -f $snpinfofile ] && [ ! -z "$traindir" ] 
    then 
        snpinfofile="$traindir/chrom$CHROM.$traintag.snpinfo"
    fi

    if [ ! -f $snpinfofile ]
    then 
        echo "ERROR: cannot find chrom$CHROM.$traintag.snpinfo"
        exit 1
    fi  

    echo "SNPID rsid chromosome position alleleA alleleB risk_score_identifier additive_beta heterozygote_beta" > $moddir/$modtag.adjbetahat_pg_qctool.chrom$CHROM.txt
    
    tail -n +2 $snpinfofile | paste - $moddir/$modtag.adjbetahat_pg.chrom$CHROM.txt | awk '{print $2 " " $3 " " $1 " " $4 " " $5 " " $6 " NPS " $7 " 0"}' >> $moddir/$modtag.adjbetahat_pg_qctool.chrom$CHROM.txt
	    
    $QCTOOL $input -compare-variants-by position,alleles -risk-score $moddir/$modtag.adjbetahat_pg_qctool.chrom$CHROM.txt -osample $moddir/$modtag.predY_pg.$valtag.chrom$CHROM.qctoolout

    echo "SNPID rsid chromosome position alleleA alleleB risk_score_identifier additive_beta heterozygote_beta" > $moddir/$modtag.adjbetahat_tail_qctool.chrom$CHROM.txt
    
    tail -n +2 $snpinfofile | paste - $moddir/$modtag.adjbetahat_tail.chrom$CHROM.txt | awk '{ if ($7 != "0") { print $2 " " $3 " " $1 " " $4 " " $5 " " $6 " NPS " $7 " 0"} }' >> $moddir/$modtag.adjbetahat_tail_qctool.chrom$CHROM.txt

    ntail=`cat $moddir/$modtag.adjbetahat_tail_qctool.chrom$CHROM.txt | wc -l`

    if [ $ntail -gt 1 ]
    then
    
	$QCTOOL $input -compare-variants-by position,alleles -risk-score $moddir/$modtag.adjbetahat_tail_qctool.chrom$CHROM.txt -osample $moddir/$modtag.predY_tail.$valtag.chrom$CHROM.qctoolout

    else
	# empty file 
	:> $moddir/$modtag.predY_tail.$valtag.chrom$CHROM.qctoolout
    fi

done

echo "Done"
